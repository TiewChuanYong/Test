@page "/menus/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable

<h3 class="card-title">Menus </h3>

<a href="/menus/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Menu
</a>
<br />
<br />

@if (menus == null)
{
    <div class="alert alert-info">Loading Menus...</div>

}
else
{
    <table class="table table-responsive"  id="menusTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Restaurants</th>
                <th>        </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var menu in menus)
            {
                <tr>
                    <td>@menu.Name</td>
                    <td>@menu.Restaurant.Name</td>
                    <td>
                        <a href="/menus/view/@menu.Id" class="btn btn-primary">
                            <span class=" oi oi-book"></span>
                        </a>
                        <a href="/menus/edit/@menu.Id" class="btn btn-warning">
                            <span class=" oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(menu.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Menu> menus;

    protected async override Task OnInitializedAsync()
    {
        menus = await _client.GetFromJsonAsync<List<Menu>>($"{Endpoints.MenusEndpoint}");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#menusTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#menusTable");
    }

    async Task Delete(int menuId)
    {
        var menu = menus.First(q => q.Id == menuId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {menu.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.MenusEndpoint}/{menuId}");
            await OnInitializedAsync();
        }
    }
}