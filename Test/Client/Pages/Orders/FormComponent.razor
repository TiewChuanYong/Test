@inject HttpClient _client

<h3></h3>

<EditForm Model="@order" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Order: </label>

    </div>

    <div class="form-group">
        <label>Restaurants: </label>
        <div>
            <InputSelect @bind-Value="order.ResturantId" class="form-control">
                <option value=""> -- Select Restaurant --</option>
                @if (Restaurants != null)
                {
                    foreach (var restaurant in Restaurants)
                    {
                        <option value="@restaurant.Id">@restaurant.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => order.ResturantId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Customer: </label>
        <div>
            <InputSelect @bind-Value="order.CustomerId" class="form-control">
                <option value=""> -- Select Restaurant --</option>
                @if (Customers != null)
                {
                    foreach (var customer in Customers)
                    {
                        <option value="@customer.Id">@customer.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => order.CustomerId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Menu Item: </label>
        <div>
            <InputSelect @bind-Value="order.MenuItemId" class="form-control">
                <option value=""> -- Select Menu Item --</option>
                @if (MenuItems != null)
                {
                    foreach (var menuItem in MenuItems)
                    {
                        <option value="@menuItem.Id">@menuItem.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => order.MenuItemId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Paid? : </label>
        <div>
            <InputCheckbox @bind-Value="order.Paid" class="form-control"></InputCheckbox>
            <ValidationMessage For="@(() => order.Paid)" />
        </div>
    </div>


    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="order" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Order order { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Restaurant> Restaurants;
    private IList<Customer> Customers;
    private IList<MenuItem> MenuItems;

    protected async override Task OnInitializedAsync()

    {
        MenuItems = await _client.GetFromJsonAsync<List<MenuItem>>($"{Endpoints.MenuItemsEndpoint}");
        Restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomerEndpoint}");
    }


}
