@page "/order"
@inject HttpClient _client
@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable


<h3 class="card-title"> Orders </h3>
<a href="/order/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Orders
</a>
<br />
<br />

@if (Orders == null)
{
    <div class="alert alert-info">Loading Orders...</div>

}
else
{
    <table class="table table-responsive" id="ordersTable">
        <thead>
            <tr>
                <th>Customer</th>
                <th>Restaurant</th>
                <th>Menu Item</th>
                <th>Price</th>
                <th>Paid</th>
                <th>        </th>


            </tr>
        </thead>
        <tbody>
            @foreach (var order in Orders)
            {
                <tr>
                    <td>@order.Customer.Name</td>
                    <td>@order.ResturantId</td>
                    <td>@order.MenuItem.Name</td>
                    <th>@order.MenuItem.Price</th>
                    <td>@order.Paid</td>



                    <td>
                        <a href="/order/view/@order.Id" class="btn btn-primary">
                            <span class=" oi oi-book"></span>
                        </a>
                        <a href="/order/edit/@order.Id" class="btn btn-warning">
                            <span class=" oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(order.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Order> Orders;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Orders = await _client.GetFromJsonAsync<List<Order>>($"{Endpoints.OrderEndpoint}");
    }


    async Task Delete(int orderId)
    {
        var order = Orders.First(q => q.Id == orderId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {order.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.OrderEndpoint}/{orderId}");
            await OnInitializedAsync();
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#ordersTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#ordersTable");
        _interceptor.DisposeEvent();
    }


}